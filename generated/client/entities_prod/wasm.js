
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AddressScalarFieldEnum = {
  address_id: 'address_id',
  entity_id: 'entity_id',
  line_one: 'line_one',
  line_two: 'line_two',
  area: 'area',
  city: 'city',
  state: 'state',
  zipcode: 'zipcode',
  country: 'country',
  country_code: 'country_code',
  ref_id: 'ref_id',
  created_by: 'created_by',
  updated_by: 'updated_by',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  address_type: 'address_type'
};

exports.Prisma.AgencyScalarFieldEnum = {
  agency_id: 'agency_id',
  name: 'name',
  score: 'score',
  limit: 'limit',
  contract: 'contract',
  short: 'short',
  long: 'long',
  created_by: 'created_by',
  updated_by: 'updated_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AssetScalarFieldEnum = {
  id: 'id',
  asset_id: 'asset_id',
  entity_id: 'entity_id',
  batch: 'batch',
  batch_parent: 'batch_parent',
  name: 'name',
  issued: 'issued',
  quantity: 'quantity',
  ccy: 'ccy',
  unit_price: 'unit_price',
  classification: 'classification',
  description: 'description',
  serial_number: 'serial_number',
  repair_maint: 'repair_maint',
  eot: 'eot',
  vat_included: 'vat_included',
  vat_on_purchases: 'vat_on_purchases',
  created_by: 'created_by',
  updated_by: 'updated_by',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.BankScalarFieldEnum = {
  bank_id: 'bank_id',
  country_id: 'country_id',
  name: 'name',
  SWIFT_BIC: 'SWIFT_BIC',
  status: 'status',
  address_id: 'address_id',
  created_by: 'created_by',
  updated_by: 'updated_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Bank_accountScalarFieldEnum = {
  bank_account_id: 'bank_account_id',
  entity_role_id: 'entity_role_id',
  entity_id: 'entity_id',
  bank_id: 'bank_id',
  name: 'name',
  sort_code: 'sort_code',
  account: 'account',
  SWIFT_BIC: 'SWIFT_BIC',
  IBAN: 'IBAN',
  is_valid_iban: 'is_valid_iban',
  ccy: 'ccy',
  account_ref: 'account_ref',
  prev_id: 'prev_id',
  created_by: 'created_by',
  updated_by: 'updated_by',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.BuyScalarFieldEnum = {
  acquisition_id: 'acquisition_id',
  status: 'status',
  originator_id: 'originator_id',
  debtor_id: 'debtor_id',
  creditor_id: 'creditor_id',
  credebtor_id: 'credebtor_id',
  leasee_id: 'leasee_id',
  ledger: 'ledger',
  type: 'type',
  etr_no: 'etr_no',
  classification: 'classification',
  issued: 'issued',
  trade_id: 'trade_id',
  PO: 'PO',
  ref: 'ref',
  posted: 'posted',
  deposit: 'deposit',
  traded: 'traded',
  EDSO: 'EDSO',
  ccy: 'ccy',
  face_value: 'face_value',
  expected_date: 'expected_date',
  ETR_FILE: 'ETR_FILE',
  organisation_file: 'organisation_file',
  PO_file: 'PO_file',
  PoD_file: 'PoD_file',
  signed_file: 'signed_file',
  fx_file_check: 'fx_file_check',
  proof_file: 'proof_file',
  organisation_check: 'organisation_check',
  issued_check: 'issued_check',
  PO_check: 'PO_check',
  ref_check: 'ref_check',
  face_value_check: 'face_value_check',
  expected_date_check: 'expected_date_check',
  etr_check: 'etr_check',
  organisation_file_check: 'organisation_file_check',
  PoD_check: 'PoD_check',
  signed_check: 'signed_check',
  proof_check: 'proof_check',
  assessed_by: 'assessed_by',
  assessed_at: 'assessed_at',
  approved_by: 'approved_by',
  approved_at: 'approved_at',
  authorized_by: 'authorized_by',
  authorized_at: 'authorized_at',
  deviated_at: 'deviated_at',
  purchased: 'purchased',
  sell_rate: 'sell_rate',
  sell_type: 'sell_type',
  disable_180_days: 'disable_180_days',
  idc_premium: 'idc_premium',
  agent_premium: 'agent_premium',
  traded_fx: 'traded_fx',
  trade_commission: 'trade_commission',
  settled: 'settled',
  settled_fx: 'settled_fx',
  closed: 'closed',
  closed_fx: 'closed_fx',
  fixed_charge: 'fixed_charge',
  EOT: 'EOT',
  VAT_included: 'VAT_included',
  VAT_on_purchases: 'VAT_on_purchases',
  EUR_value: 'EUR_value',
  PTV: 'PTV',
  idtkoi: 'idtkoi',
  deviation_message: 'deviation_message',
  rejected_message: 'rejected_message',
  contact_first_name: 'contact_first_name',
  contact_last_name: 'contact_last_name',
  contact_phone: 'contact_phone',
  contact_country: 'contact_country',
  contact_area: 'contact_area',
  created_by: 'created_by',
  updated_by: 'updated_by',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  unit_price: 'unit_price',
  months: 'months',
  PO_file_check: 'PO_file_check',
  payment_terms: 'payment_terms',
  PO_date: 'PO_date',
  rejected_at: 'rejected_at',
  invoice_no: 'invoice_no',
  fx_file: 'fx_file',
  invoice_date: 'invoice_date'
};

exports.Prisma.Demo_usersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  created_at: 'created_at'
};

exports.Prisma.EntityScalarFieldEnum = {
  entity_id: 'entity_id',
  type: 'type',
  name: 'name',
  trade_name: 'trade_name',
  creator_ledger_id: 'creator_ledger_id',
  computed_phones: 'computed_phones',
  computed_addresses: 'computed_addresses',
  computed_emails: 'computed_emails',
  prev_id: 'prev_id',
  created_by: 'created_by',
  updated_by: 'updated_by',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  is_deleted: 'is_deleted',
  dups_ok: 'dups_ok'
};

exports.Prisma.Entity_contactScalarFieldEnum = {
  parent_id: 'parent_id',
  entity_id: 'entity_id',
  title: 'title',
  is_primary: 'is_primary'
};

exports.Prisma.Entity_mappingScalarFieldEnum = {
  entity_mapping_id: 'entity_mapping_id',
  parent_id: 'parent_id',
  entity_id: 'entity_id',
  title: 'title',
  is_primary: 'is_primary',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by',
  deleted_at: 'deleted_at'
};

exports.Prisma.Entity_propertyScalarFieldEnum = {
  entity_property_id: 'entity_property_id',
  entity_id: 'entity_id',
  parent_id: 'parent_id',
  property_id: 'property_id',
  property_refid: 'property_refid',
  property_title: 'property_title',
  property_value: 'property_value',
  is_primary: 'is_primary',
  position: 'position',
  created_by: 'created_by',
  updated_by: 'updated_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Entity_required_documentScalarFieldEnum = {
  entity_id: 'entity_id',
  ETR_file: 'ETR_file',
  organisation_file: 'organisation_file',
  PO_file: 'PO_file',
  PoD_file: 'PoD_file',
  signed_file: 'signed_file',
  fx_file: 'fx_file',
  proof_file: 'proof_file',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Entity_risk_and_ratesScalarFieldEnum = {
  id: 'id',
  entity_id: 'entity_id',
  c_max: 'c_max',
  c_daily: 'c_daily',
  c_grade: 'c_grade',
  c_asset: 'c_asset',
  c_debtor: 'c_debtor',
  c_creditor: 'c_creditor',
  c_ppp: 'c_ppp',
  ex_limit: 'ex_limit',
  ex_contract: 'ex_contract',
  c_st: 'c_st',
  c_lt: 'c_lt',
  s_p_st: 's_p_st',
  s_p_lt: 's_p_lt',
  limit: 'limit',
  contract: 'contract',
  rating: 'rating',
  performance: 'performance',
  other_information: 'other_information',
  act_management_document: 'act_management_document',
  statutory_filings_document: 'statutory_filings_document',
  tax_VAT_returns_document: 'tax_VAT_returns_document',
  licence_document: 'licence_document',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Entity_roleScalarFieldEnum = {
  entity_role_id: 'entity_role_id',
  entity_id: 'entity_id',
  role_id: 'role_id',
  parent_role_id: 'parent_role_id',
  related_role_id: 'related_role_id',
  created_by: 'created_by',
  updated_by: 'updated_by',
  created_at: 'created_at',
  updated_at: 'updated_at',
  extra_data: 'extra_data'
};

exports.Prisma.ParamScalarFieldEnum = {
  param_id: 'param_id',
  table: 'table',
  id: 'id',
  value: 'value',
  created_by: 'created_by',
  updated_by: 'updated_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Param_countryScalarFieldEnum = {
  country_id: 'country_id',
  name: 'name',
  dial_code: 'dial_code',
  timezone: 'timezone',
  iso2: 'iso2',
  accountLength: 'accountLength',
  created_by: 'created_by',
  updated_by: 'updated_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Param_sequenceScalarFieldEnum = {
  table: 'table',
  id: 'id'
};

exports.Prisma.Param_tableScalarFieldEnum = {
  table: 'table',
  last_id: 'last_id',
  description: 'description'
};

exports.Prisma.PeopleScalarFieldEnum = {
  people_id: 'people_id',
  entity_id: 'entity_id',
  type: 'type',
  salutation: 'salutation',
  first_name: 'first_name',
  last_name: 'last_name',
  title: 'title',
  date_of_birth: 'date_of_birth',
  created_by: 'created_by',
  updated_by: 'updated_by',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.PhoneScalarFieldEnum = {
  phone_id: 'phone_id',
  device_type: 'device_type',
  phone_type: 'phone_type',
  label: 'label',
  country: 'country',
  prefix: 'prefix',
  number: 'number',
  created_by: 'created_by',
  updated_by: 'updated_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PropertyScalarFieldEnum = {
  property_id: 'property_id',
  type: 'type',
  description: 'description',
  label: 'label',
  table: 'table',
  param_table: 'param_table',
  param_type: 'param_type',
  allow_multiple: 'allow_multiple',
  created_by: 'created_by',
  updated_by: 'updated_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.RatingScalarFieldEnum = {
  rating_id: 'rating_id',
  name: 'name',
  type: 'type',
  score: 'score',
  short: 'short',
  limit: 'limit',
  contract: 'contract',
  created_by: 'created_by',
  updated_by: 'updated_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.RoleScalarFieldEnum = {
  role_id: 'role_id',
  name: 'name',
  recognition_priority: 'recognition_priority',
  type: 'type'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.addressOrderByRelevanceFieldEnum = {
  line_one: 'line_one',
  line_two: 'line_two',
  area: 'area',
  city: 'city',
  state: 'state',
  zipcode: 'zipcode',
  country: 'country',
  country_code: 'country_code',
  address_type: 'address_type'
};

exports.Prisma.agencyOrderByRelevanceFieldEnum = {
  name: 'name',
  score: 'score',
  limit: 'limit',
  contract: 'contract',
  short: 'short',
  long: 'long'
};

exports.Prisma.assetOrderByRelevanceFieldEnum = {
  asset_id: 'asset_id',
  batch: 'batch',
  batch_parent: 'batch_parent',
  name: 'name',
  ccy: 'ccy',
  classification: 'classification',
  description: 'description',
  serial_number: 'serial_number',
  repair_maint: 'repair_maint',
  vat_included: 'vat_included'
};

exports.Prisma.bankOrderByRelevanceFieldEnum = {
  country_id: 'country_id',
  name: 'name',
  SWIFT_BIC: 'SWIFT_BIC'
};

exports.Prisma.bank_accountOrderByRelevanceFieldEnum = {
  entity_role_id: 'entity_role_id',
  name: 'name',
  sort_code: 'sort_code',
  account: 'account',
  SWIFT_BIC: 'SWIFT_BIC',
  IBAN: 'IBAN',
  ccy: 'ccy',
  account_ref: 'account_ref',
  prev_id: 'prev_id'
};

exports.Prisma.buyOrderByRelevanceFieldEnum = {
  status: 'status',
  originator_id: 'originator_id',
  debtor_id: 'debtor_id',
  creditor_id: 'creditor_id',
  credebtor_id: 'credebtor_id',
  leasee_id: 'leasee_id',
  ledger: 'ledger',
  type: 'type',
  classification: 'classification',
  trade_id: 'trade_id',
  PO: 'PO',
  ref: 'ref',
  ccy: 'ccy',
  ETR_FILE: 'ETR_FILE',
  organisation_file: 'organisation_file',
  PO_file: 'PO_file',
  PoD_file: 'PoD_file',
  signed_file: 'signed_file',
  proof_file: 'proof_file',
  assessed_by: 'assessed_by',
  approved_by: 'approved_by',
  authorized_by: 'authorized_by',
  sell_type: 'sell_type',
  disable_180_days: 'disable_180_days',
  idtkoi: 'idtkoi',
  deviation_message: 'deviation_message',
  rejected_message: 'rejected_message',
  contact_first_name: 'contact_first_name',
  contact_last_name: 'contact_last_name',
  contact_phone: 'contact_phone',
  contact_country: 'contact_country',
  contact_area: 'contact_area',
  fx_file: 'fx_file'
};

exports.Prisma.demo_usersOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email'
};

exports.Prisma.entityOrderByRelevanceFieldEnum = {
  name: 'name',
  trade_name: 'trade_name',
  computed_phones: 'computed_phones',
  computed_addresses: 'computed_addresses',
  computed_emails: 'computed_emails',
  prev_id: 'prev_id'
};

exports.Prisma.entity_contactOrderByRelevanceFieldEnum = {
  title: 'title'
};

exports.Prisma.entity_mappingOrderByRelevanceFieldEnum = {
  title: 'title'
};

exports.Prisma.entity_propertyOrderByRelevanceFieldEnum = {
  property_id: 'property_id',
  property_title: 'property_title',
  property_value: 'property_value'
};

exports.Prisma.entity_risk_and_ratesOrderByRelevanceFieldEnum = {
  c_max: 'c_max',
  c_daily: 'c_daily',
  c_grade: 'c_grade',
  c_asset: 'c_asset',
  c_debtor: 'c_debtor',
  c_creditor: 'c_creditor',
  c_ppp: 'c_ppp',
  ex_limit: 'ex_limit',
  ex_contract: 'ex_contract',
  c_st: 'c_st',
  c_lt: 'c_lt',
  s_p_st: 's_p_st',
  s_p_lt: 's_p_lt',
  limit: 'limit',
  contract: 'contract',
  rating: 'rating',
  performance: 'performance',
  other_information: 'other_information'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.entity_roleOrderByRelevanceFieldEnum = {
  entity_role_id: 'entity_role_id',
  parent_role_id: 'parent_role_id',
  related_role_id: 'related_role_id'
};

exports.Prisma.paramOrderByRelevanceFieldEnum = {
  table: 'table',
  id: 'id',
  value: 'value'
};

exports.Prisma.param_countryOrderByRelevanceFieldEnum = {
  country_id: 'country_id',
  name: 'name',
  dial_code: 'dial_code',
  timezone: 'timezone',
  iso2: 'iso2'
};

exports.Prisma.param_sequenceOrderByRelevanceFieldEnum = {
  table: 'table'
};

exports.Prisma.param_tableOrderByRelevanceFieldEnum = {
  table: 'table',
  description: 'description'
};

exports.Prisma.peopleOrderByRelevanceFieldEnum = {
  salutation: 'salutation',
  first_name: 'first_name',
  last_name: 'last_name',
  title: 'title'
};

exports.Prisma.phoneOrderByRelevanceFieldEnum = {
  label: 'label',
  country: 'country',
  prefix: 'prefix',
  number: 'number'
};

exports.Prisma.propertyOrderByRelevanceFieldEnum = {
  property_id: 'property_id',
  type: 'type',
  description: 'description',
  label: 'label',
  table: 'table',
  param_table: 'param_table',
  param_type: 'param_type'
};

exports.Prisma.ratingOrderByRelevanceFieldEnum = {
  name: 'name',
  type: 'type',
  score: 'score',
  short: 'short',
  limit: 'limit',
  contract: 'contract'
};

exports.Prisma.roleOrderByRelevanceFieldEnum = {
  name: 'name'
};
exports.entity_contact_is_primary = exports.$Enums.entity_contact_is_primary = {
  Yes: 'Yes',
  No: 'No'
};

exports.entity_mapping_is_primary = exports.$Enums.entity_mapping_is_primary = {
  Yes: 'Yes',
  No: 'No'
};

exports.entity_property_is_primary = exports.$Enums.entity_property_is_primary = {
  Yes: 'Yes',
  No: 'No'
};

exports.property_allow_multiple = exports.$Enums.property_allow_multiple = {
  Yes: 'Yes',
  No: 'No'
};

exports.Prisma.ModelName = {
  address: 'address',
  agency: 'agency',
  asset: 'asset',
  bank: 'bank',
  bank_account: 'bank_account',
  buy: 'buy',
  demo_users: 'demo_users',
  entity: 'entity',
  entity_contact: 'entity_contact',
  entity_mapping: 'entity_mapping',
  entity_property: 'entity_property',
  entity_required_document: 'entity_required_document',
  entity_risk_and_rates: 'entity_risk_and_rates',
  entity_role: 'entity_role',
  param: 'param',
  param_country: 'param_country',
  param_sequence: 'param_sequence',
  param_table: 'param_table',
  people: 'people',
  phone: 'phone',
  property: 'property',
  rating: 'rating',
  role: 'role'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
